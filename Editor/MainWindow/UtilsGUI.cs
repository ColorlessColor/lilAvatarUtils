using System;
using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEditor.Animations;
using UnityEngine;

namespace jp.lilxyzw.avatarutils
{
    [Docs(T_Title,T_Description)]
    [Serializable]
    internal class UtilsGUI
    {
        internal const string T_Title = "Utils";
        internal const string T_Description = "This tab contains miscellaneous utilities.";
        internal const string T_HowTo = "";
        internal static readonly string[] T_TD = {T_Title, T_Description};

        [DocsField] private static readonly string[] L_CleanUpMaterials           = {"Clean up Materials"          , "Delete any unnecessary properties that are not used by the assigned shader. It is recommended to delete any unnecessary texture allocations, as they may result in unnecessary textures being included in the avatar, making it larger in size."};
        [DocsField] private static readonly string[] L_CleanUpAnimatorControllers = {"Clean up AnimatorControllers", "Delete unnecessary sub-assets that are not referenced anywhere and are generated by editing the AnimatorController."};
        [DocsField] private static readonly string[] L_RemoveMissingComponents    = {"Remove Missing Components"   , "Remove any missing components where a required script has not been imported or has been corrupted in some way."};

        internal GameObject gameObject;

        internal void Draw(AvatarUtils window)
        {
            if(gameObject == null) return;
            if(L10n.Button(L_CleanUpMaterials))
            {
                var cleanedMaterials = MaterialCleaner.RemoveUnusedProperties(window.materialsGUI.mds.Keys);
                L10n.DisplayDialog(
                    AvatarUtils.TEXT_WINDOW_NAME,
                    "Removed unused properties on {0} materials.",
                    "OK",
                    cleanedMaterials.Count
                );
            }
            if(L10n.Button(L_CleanUpAnimatorControllers))
            {
                var controllers = new HashSet<RuntimeAnimatorController>(
                    gameObject.GetBuildComponents<Animator>().Select(a => a.runtimeAnimatorController)
                );

                var scaned = new HashSet<UnityEngine.Object>();
                controllers.UnionWith(gameObject.GetComponentsInChildren<MonoBehaviour>(true).SelectMany(c => ObjectHelper.GetReferenceFromObject<RuntimeAnimatorController>(scaned, c)));

                var cleanedControllers = SubAssetCleaner.RemoveUnusedSubAssets(controllers.Where(ac => ac is AnimatorController));
                L10n.DisplayDialog(
                    AvatarUtils.TEXT_WINDOW_NAME,
                    "Removed unused sub-assets in {0} AnimatorControllers.",
                    "OK",
                    cleanedControllers.Count
                );
            }
            if(L10n.Button(L_RemoveMissingComponents))
            {
                int count = 0;
                foreach(var t in gameObject.GetComponentsInChildren<Transform>(true))
                {
                    count += GameObjectUtility.RemoveMonoBehavioursWithMissingScript(t.gameObject);
                }
                L10n.DisplayDialog(
                    AvatarUtils.TEXT_WINDOW_NAME,
                    "Removed {0} missing components.",
                    "OK",
                    count
                );
            }
        }
    }
}
